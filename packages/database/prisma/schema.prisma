datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider     = "zod-prisma"
  output       = "../../../apps/api/src/generated_schemas" // (default) the directory where generated zod schemas will be saved
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)
}

model Account {
  id       String           @id @default(cuid()) /// @zod.uuid()
  email    String           @unique /// @zod.email()
  password String /// @zod.min(8, { message: "The password must be at least 8 characters long" })
  messages Message[]
  channels AccountChannel[]
}

model AccountChannel {
  id        String   @id @default(cuid()) /// @zod.uuid()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  channelId String /// @zod.uuid()
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  accountId String /// @zod.uuid()
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model Channel {
  id        String           @id @default(cuid()) /// @zod.uuid()
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  messages  Message[]
  accounts  AccountChannel[]
}

model Message {
  id        String   @id @default(cuid()) /// @zod.uuid()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  channelId String /// @zod.uuid()
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  accountId String /// @zod.uuid()
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  content   String
}
